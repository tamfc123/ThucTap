import mongoose from "mongoose";
import User from "../models/User.js";
import Order from "../models/Order.js";
import Cart from "../models/Cart.js";
import Variant from "../models/Variant.js";

// Get all orders (Admin)
export const getAllOrders = async (req, res) => {
  try {
    const {
      page = 1,
      size = 10,
      sort = "-createdAt",
      status,
      search,
    } = req.query;

    const query = {};
    if (status) {
      query.status = status;
    }
    if (search) {
      query.code = { $regex: search, $options: "i" };
    }

    const skip = (page - 1) * size;
    const limit = Number.parseInt(size);

    const orders = await Order.find(query)
      .populate("user", "username email fullname phone")
      .populate("orderItems.product")
      .populate("orderItems.variant")
      .sort(sort)
      .skip(skip)
      .limit(limit);

    const total = await Order.countDocuments(query);

    res.json({
      content: orders,
      totalElements: total,
      totalPages: Math.ceil(total / size),
      size: limit,
      number: Number.parseInt(page) - 1,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get my orders
export const getMyOrders = async (req, res) => {
  try {
    const { page = 1, size = 10, status } = req.query;

    const query = { user: req.user._id };
    if (status) {
      query.status = status;
    }

    const skip = (page - 1) * size;
    const limit = Number.parseInt(size);

    const orders = await Order.find(query)
      .populate("orderItems.product")
      .populate("orderItems.variant")
      .sort("-createdAt")
      .skip(skip)
      .limit(limit);

    const total = await Order.countDocuments(query);

    res.json({
      content: orders,
      totalElements: total,
      totalPages: Math.ceil(total / size),
      size: limit,
      number: Number.parseInt(page) - 1,
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Get order by ID
export const getOrderById = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id)
      .populate("user", "username email fullname phone")
      .populate("orderItems.product")
      .populate("orderItems.variant");

    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // Check if user owns this order or is admin
    if (
      order.user._id.toString() !== req.user._id.toString() &&
      req.user.role !== "ADMIN"
    ) {
      return res
        .status(403)
        .json({ message: "Not authorized to view this order" });
    }

    res.json(order);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

// Create order
export const createOrder = async (req, res) => {
  // B·∫Øt ƒë·∫ßu m·ªôt transaction
  const session = await mongoose.startSession();
  session.startTransaction();

  try {
    // 1. L·∫•y d·ªØ li·ªáu t·ª´ request v√† token
    const { cartId, paymentMethodType } = req.body;
    const userId = req.user._id;

    // üîΩüîΩüîΩ TH√äM 2 D√íNG N√ÄY üîΩüîΩüîΩ
    console.log("ƒêang t√¨m gi·ªè h√†ng v·ªõi cartId:", cartId);
    console.log("ƒêang t√¨m gi·ªè h√†ng v·ªõi userId:", userId);
    // üîºüîºüîº K·∫æT TH√öC TH√äM üîºüîºüîº

    // 2. L·∫•y th√¥ng tin User (ƒë·ªÉ l·∫•y ƒë·ªãa ch·ªâ)
    const user = await User.findById(userId)
      .populate("address.wardId")     // S·ª≠a 'ward' -> 'wardId'
      .populate("address.districtId") // S·ª≠a 'district' -> 'districtId'
      .populate("address.provinceId") // S·ª≠a 'province' -> 'provinceId'
      .session(session);

    if (!user) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
    }

    // 3. L·∫•y th√¥ng tin gi·ªè h√†ng
    const cart = await Cart.findOne({ _id: cartId, user: userId })
      .populate({
        path: "cartVariants.variant",
        populate: {
          path: "product",
          // populate: {
          //   path: "promotionId", // L·∫•y th√¥ng tin khuy·∫øn m√£i
          // },
        },
      })
      .session(session);
    console.log('Cart fetched in createOrder:', cart);

    if (!cart || !cart.cartVariants || cart.cartVariants.length === 0) {
      throw new Error("Gi·ªè h√†ng r·ªóng.");
    }

    // 5. L·∫•y ƒë·ªãa ch·ªâ giao h√†ng t·ª´ User
    const { address } = user;
    if (
      !address ||
      !address.line ||
      !address.wardId ||     // S·ª≠a 'ward' -> 'wardId'
      !address.districtId || // S·ª≠a 'district' -> 'districtId'
      !address.provinceId    // S·ª≠a 'province' -> 'provinceId'
    ) {
      throw new Error(
        "Vui l√≤ng c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng tr∆∞·ªõc khi ƒë·∫∑t h√†ng."
      );
    }
    const fullAddress = [
      address.line,
      address.wardId.name,     // S·ª≠a 'ward' -> 'wardId'
      address.districtId.name, // S·ª≠a 'district' -> 'districtId'
      address.provinceId.name, // S·ª≠a 'province' -> 'provinceId'
    ].join(", ");

    // 6. T√≠nh to√°n ƒë∆°n h√†ng v√† chu·∫©n b·ªã 'orderVariants'
    let totalAmount = 0;
    const orderVariants = [];

    // Helper (gi·ªëng h·ªát frontend)
    const calculateDiscountedPrice = (price, percent) => {
      if (!percent || percent === 0) return price;
      return price - (price * percent) / 100;
    };

    for (const item of cart.cartVariants) {
      const variant = item.variant;
      const product = variant.product;

      if (!variant) throw new Error("Kh√¥ng t√¨m th·∫•y m·ªôt bi·∫øn th·ªÉ s·∫£n ph·∫©m.");

      // Ki·ªÉm tra t·ªìn kho
      if (variant.inventory < item.quantity) {
        throw new Error(
          `S·∫£n ph·∫©m '${product.name}' kh√¥ng ƒë·ªß t·ªìn kho (c√≤n ${variant.inventory}).`
        );
      }

      const promotionPercent = 0;
      const finalPrice = calculateDiscountedPrice(
        variant.price,
        promotionPercent
      );
      const amount = finalPrice * item.quantity;

      totalAmount += amount;

      orderVariants.push({
        variant: variant._id,
        price: finalPrice,
        quantity: item.quantity,
        amount: amount,
      });

      // Tr·ª´ t·ªìn kho
      variant.inventory -= item.quantity;
      await variant.save({ session });
    }

    // 7. T√≠nh to√°n t·ªïng ti·ªÅn (gi·ªëng h·ªát frontend)
    const TAX_RATE = 0.1; // Gi·∫£ s·ª≠ 10%
    const SHIPPING_COST = 0; // T·∫°m th·ªùi

    const tax = Math.round(totalAmount * TAX_RATE);
    const shippingCost = SHIPPING_COST;
    const totalPay = totalAmount + tax + shippingCost;

    // 8. T·∫°o ƒë∆°n h√†ng m·ªõi
    const newOrder = new Order({
      code: `ORD${Date.now()}`,
      status: 1,
      toName: user.fullname,
      toPhone: user.phone,
      toAddress: address.line,
      toWardName: address.wardId.name,     // S·ª≠a 'ward' -> 'wardId'
      toDistrictName: address.districtId.name, // S·ª≠a 'district' -> 'districtId'
      toProvinceName: address.provinceId.name, // S·ª≠a 'province' -> 'provinceId'

      orderResource: null, // <--- S·ª¨A D√íNG N√ÄY (g√°n th·∫≥ng l√† null)

      note: null,
      user: userId,
      orderVariants: orderVariants,
      totalAmount: totalAmount,
      tax: tax,
      shippingCost: shippingCost,
      totalPay: totalPay,
      paymentMethodType: paymentMethodType,
      paymentStatus: 1,
    });

    await newOrder.save({ session });

    // 9. X√≥a gi·ªè h√†ng
    await Cart.findByIdAndDelete(cartId).session(session);

    // 10. Commit transaction
    await session.commitTransaction();

    // 11. Chu·∫©n b·ªã d·ªØ li·ªáu tr·∫£ v·ªÅ cho frontend
    // (Ph·∫ßn n√†y c·∫ßn kh·ªõp v·ªõi ClientConfirmedOrderResponse)

    let momoCheckoutLink = null;
    let paypalCheckoutLink = null;

    if (paymentMethodType === "MOMO") {
      // TODO: G·ªçi API Momo ƒë·ªÉ t·∫°o link thanh to√°n
      // momoCheckoutLink = ...
    }


    res.status(201).json({
      orderCode: newOrder.code,
      orderPaymentMethodType: newOrder.paymentMethodType,
      orderPaypalCheckoutLink: paypalCheckoutLink,
      orderMomoCheckoutLink: momoCheckoutLink,
    });
  } catch (error) {
    // N·∫øu c√≥ l·ªói, rollback transaction
    await session.abortTransaction();
    res
      .status(400)
      .json({ message: error.message || "T·∫°o ƒë∆°n h√†ng th·∫•t b·∫°i." });
  } finally {
    // Lu√¥n lu√¥n k·∫øt th√∫c session
    session.endSession();
  }
};

// Update order status (Admin)
export const updateOrderStatus = async (req, res) => {
  try {
    const { status } = req.body;

    const order = await Order.findByIdAndUpdate(
      req.params.id,
      { status },
      { new: true }
    )
      .populate("user", "username email fullname phone")
      .populate("orderItems.product")
      .populate("orderItems.variant");

    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    res.json(order);
  } catch (error) {
    res.status(400).json({ message: error.message });
  }
};

// Cancel order
export const cancelOrder = async (req, res) => {
  try {
    const order = await Order.findById(req.params.id);

    if (!order) {
      return res.status(404).json({ message: "Order not found" });
    }

    // Check if user owns this order
    if (order.user.toString() !== req.user._id.toString()) {
      return res
        .status(403)
        .json({ message: "Not authorized to cancel this order" });
    }

    // Can only cancel pending orders
    if (order.status !== "PENDING") {
      return res
        .status(400)
        .json({ message: "Cannot cancel order with current status" });
    }

    order.status = "CANCELLED";
    await order.save();

    res.json(order);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export default {
  getAllOrders,
  getMyOrders,
  getOrderById,
  createOrder,
  updateOrderStatus,
  cancelOrder,
};
