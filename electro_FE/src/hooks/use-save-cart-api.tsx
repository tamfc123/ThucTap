// hooks/use-save-cart-api.tsx
import { useMutation, useQueryClient } from 'react-query';
import useAuthStore from 'stores/use-auth-store';
import { ClientCartRequest, ClientCartResponse } from 'types';
import FetchUtils, { ErrorMessage } from 'utils/FetchUtils';
import ResourceURL from 'constants/ResourceURL';
import NotifyUtils from 'utils/NotifyUtils';


function useSaveCartApi() {
  const queryClient = useQueryClient();
  const { currentCartId, currentTotalCartItems, updateCurrentCartId, updateCurrentTotalCartItems } = useAuthStore();

  return useMutation<any, ErrorMessage, ClientCartRequest>(
    (requestBody) => FetchUtils.postWithToken(ResourceURL.CLIENT_CART, requestBody),
    {
      onSuccess: (cartResponse) => { // cartResponse ƒëang l√† undefined

        // üîΩ FIX: TH√äM D√íNG N√ÄY ƒê·ªÇ KI·ªÇM TRA üîΩ
        if (!cartResponse) {
          console.error('SaveCart Success Callback: Received undefined response from server.');
          NotifyUtils.simpleFailed('C√≥ l·ªói x·∫£y ra, response t·ª´ server r·ªóng.');
          return; // D·ª´ng h√†m t·∫°i ƒë√¢y
        }
        // üîº K·∫æT TH√öC FIX üîº

        console.log('Cart API Response:', cartResponse);

        void queryClient.invalidateQueries(['client-api', 'carts', 'getCart']);

        const cartItems = cartResponse.cartItems || cartResponse.cartVariants || [];

        const totalItems = cartItems.reduce((total: number, item: any) => {
          // S·ª¨A L·∫†I LOGIC T√çNH T·ªîNG CHO ƒê√öNG (n·∫øu d√πng controller ph·ª©c t·∫°p)
          return total + (item.cartItemQuantity || item.quantity || 0);
        }, 0);

        const cartId = cartResponse.cartId || cartResponse._id;

        console.log('Processed cart items:', cartItems);
        console.log('Processed cart ID:', cartId);
        console.log('Total items calculated:', totalItems);

        if (currentCartId !== cartId) {
          updateCurrentCartId(cartId);
        }

        if (currentTotalCartItems !== totalItems) {
          updateCurrentTotalCartItems(totalItems);
        }

        // B·ªè qua logic th√¥ng b√°o ph·ª©c t·∫°p ·ªü ƒë√¢y
        // v√¨ b·∫°n ƒë√£ c√≥ th√¥ng b√°o ·ªü ClientProductIntro.tsx

      },
      onError: () => NotifyUtils.simpleFailed('Kh√¥ng l∆∞u ƒë∆∞·ª£c thay ƒë·ªïi tr√™n gi·ªè h√†ng'),
    }
  );
}

export default useSaveCartApi;