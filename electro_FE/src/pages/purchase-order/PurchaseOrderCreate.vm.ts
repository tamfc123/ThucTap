import { useForm, zodResolver } from '@mantine/form';
import PurchaseOrderConfigs from 'pages/purchase-order/PurchaseOrderConfigs';
import { PurchaseOrderRequest, PurchaseOrderResponse } from 'models/PurchaseOrder';
import useCreateApi from 'hooks/use-create-api';
import { useState } from 'react';
import { SelectOption } from 'types';
import useGetAllApi from 'hooks/use-get-all-api';
import { SupplierResponse } from 'models/Supplier';
import SupplierConfigs from 'pages/supplier/SupplierConfigs';
import { DestinationResponse } from 'models/Destination';
import DestinationConfigs from 'pages/destination/DestinationConfigs';
import { VariantResponse } from 'models/Variant';
import { PurchaseOrderVariantRequest } from 'models/PurchaseOrderVariant';
import produce from 'immer';
// (1) Import ki·ªÉu FormErrors t·ª´ @mantine/form (n·∫øu c·∫ßn d√πng onInvalid)
// import { FormErrors } from '@mantine/form'; 
import NotifyUtils from 'utils/NotifyUtils'; // Import NotifyUtils n·∫øu ch∆∞a c√≥

function usePurchaseOrderCreateViewModel() {
  const form = useForm({
    initialValues: PurchaseOrderConfigs.initialCreateUpdateFormValues,
    schema: zodResolver(PurchaseOrderConfigs.createUpdateFormSchema),
    //validateInputOnChange: true, 
  });

  const [supplierSelectList, setSupplierSelectList] = useState<SelectOption[]>([]);
  const [destinationSelectList, setDestinationSelectList] = useState<SelectOption[]>([]);
  const [variants, setVariants] = useState<VariantResponse[]>([]);

  const createApi = useCreateApi<PurchaseOrderRequest, PurchaseOrderResponse>(PurchaseOrderConfigs.resourceUrl);

  // ... (code useGetAllApi cho supplier v√† destination gi·ªØ nguy√™n) ...
  useGetAllApi<SupplierResponse>(SupplierConfigs.resourceUrl, SupplierConfigs.resourceKey,
    { all: 1 },
    (supplierListResponse) => {
      const selectList: SelectOption[] = supplierListResponse.content.map((item) => ({
        value: String(item._id),
        label: item.displayName,
      }));
      setSupplierSelectList(selectList);
    }
  );
  useGetAllApi<DestinationResponse>(DestinationConfigs.resourceUrl, DestinationConfigs.resourceKey,
    { all: 1 },
    (destinationListResponse) => {
      const selectList: SelectOption[] = destinationListResponse.content.map((item) => ({
        value: String(item._id),
        label: [item.address.line, item.address.districtId?.name, item.address.provinceId?.name].filter(Boolean).join(', '),
      }));
      setDestinationSelectList(selectList);
    }
  );

  // (2) X√≥a h√†m resetForm ·ªü ƒë√¢y v√¨ n√≥ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a l·∫°i ·ªü d∆∞·ªõi
  // const resetForm = () => { ... };

  // (3) S·ª¨A L·∫†I handleFormSubmit: Ch·ªâ truy·ªÅn 1 ƒë·ªëi s·ªë v√†o form.onSubmit
  // Trong usePurchaseOrderCreateViewModel.tsx

  const handleFormSubmit = form.onSubmit(
    (formValues) => {
      // LOG 1: B·∫Øt ƒë·∫ßu x·ª≠ l√Ω submit
      console.log('[handleFormSubmit] B∆∞·ªõc 1: onSubmit triggered');
      console.log('[handleFormSubmit] D·ªØ li·ªáu Form:', formValues);

      // LOG 2: Ki·ªÉm tra variants tr∆∞·ªõc khi t·∫°o body
      console.log('[handleFormSubmit] B∆∞·ªõc 2: Ki·ªÉm tra purchaseOrderVariants:', formValues.purchaseOrderVariants);
      if (!formValues.purchaseOrderVariants || formValues.purchaseOrderVariants.length === 0) {
        NotifyUtils.simpleFailed('Vui l√≤ng th√™m √≠t nh·∫•t m·ªôt s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng.');
        console.error('[handleFormSubmit] L·ªñI: purchaseOrderVariants r·ªóng.');
        return;
      }

      try {
        const requestBody: PurchaseOrderRequest = {
          code: formValues.code!,
          supplierId: formValues.supplierId!,
          purchaseOrderVariants: formValues.purchaseOrderVariants, // <-- LOG N√ÄY QUAN TR·ªåNG
          destinationId: formValues.destinationId!,
          totalAmount: formValues.totalAmount,
          note: formValues.note || null,
          status: Number(formValues.status),
        };
        // LOG 3: Ki·ªÉm tra requestBody ho√†n ch·ªânh
        console.log('[handleFormSubmit] B∆∞·ªõc 3: Request Body ƒë√£ t·∫°o:', requestBody);

        // === S·ª¨A L·∫†I LOG B∆Ø·ªöC 4 ===
        console.log('[handleFormSubmit] B∆∞·ªõc 4: Chu·∫©n b·ªã g·ªçi createApi.mutate...');
        // Log ri√™ng ph·∫ßn purchaseOrderVariants ƒë·ªÉ d·ªÖ xem
        console.log('--- D·ªØ li·ªáu purchaseOrderVariants s·∫Øp g·ª≠i ƒëi: ---');
        try {
          // D√πng JSON.stringify ƒë·ªÉ xem c·∫•u tr√∫c ƒë·∫ßy ƒë·ªß, tr√°nh b·ªã console g·ªôp l·∫°i
          console.log(JSON.stringify(requestBody.purchaseOrderVariants, null, 2));
        } catch (e) {
          console.error("L·ªói khi stringify purchaseOrderVariants:", e);
          console.log("D·ªØ li·ªáu purchaseOrderVariants (d·∫°ng th√¥):", requestBody.purchaseOrderVariants);
        }
        console.log('--- K·∫øt th√∫c d·ªØ li·ªáu purchaseOrderVariants ---');
        // === K·∫æT TH√öC S·ª¨A LOG ===

        createApi.mutate(requestBody, {
          onSuccess: (data) => {
            // LOG 5a: Th√†nh c√¥ng
            console.log('[handleFormSubmit] B∆∞·ªõc 5a: API Create TH√ÄNH C√îNG:', data);
            NotifyUtils.simpleSuccess('T·∫°o ƒë∆°n ƒë·∫∑t h√†ng th√†nh c√¥ng!');
            resetForm();
          },
          onError: (error: any) => {
            // LOG 5b: Th·∫•t b·∫°i
            console.error('[handleFormSubmit] B∆∞·ªõc 5b: API Create L·ªñI:', error);
            const errorMsg = error?.response?.data?.message || error.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
            NotifyUtils.simpleFailed(`L·ªói t·∫°o ƒë∆°n h√†ng: ${errorMsg}`);
            // Log th√™m l·ªói validation n·∫øu c√≥ t·ª´ backend
            if (error?.response?.data?.errors) {
              console.error('L·ªói validation chi ti·∫øt t·ª´ backend:', error.response.data.errors);
            }
          },
        });
        // LOG 6: Ngay sau khi g·ªçi mutate (ch·ªâ b√°o l√† ƒë√£ g·ªçi, ch∆∞a bi·∫øt k·∫øt qu·∫£)
        console.log('[handleFormSubmit] B∆∞·ªõc 6: createApi.mutate ƒê√É ƒê∆Ø·ª¢C G·ªåI.');

      } catch (error) {
        // LOG 7: L·ªói JavaScript khi t·∫°o requestBody
        console.error('[handleFormSubmit] L·ªñI JAVASCRIPT:', error);
        NotifyUtils.simpleFailed('L·ªói x·ª≠ l√Ω d·ªØ li·ªáu form.');
      }
    }
    // B·ªè h√†m x·ª≠ l√Ω l·ªói validation th·ª© 2 c·ªßa onSubmit ƒëi
  );

  // ... c√°c h√†m kh√°c ...

  // ... (calculateTotalAmount, handleClickVariantResultItem, handleQuantityInput, handleDeleteVariantButton gi·ªØ nguy√™n) ...
  const calculateTotalAmount = (purchaseOrderVariantRequests: PurchaseOrderVariantRequest[]) =>
    purchaseOrderVariantRequests.map(item => item.amount).reduce((a, b) => a + b, 0);

  const handleClickVariantResultItem = (variant: VariantResponse) => {
    // Ki·ªÉm tra xem variant ƒë√£ t·ªìn t·∫°i trong danh s√°ch ch∆∞a
    const isExisting = variants.some(v => v._id === variant._id);
    if (isExisting) {
      NotifyUtils.simpleFailed(`S·∫£n ph·∫©m "${variant.product?.name || variant.sku}" ƒë√£ c√≥ trong ƒë∆°n h√†ng.`);
      return; // Kh√¥ng th√™m n·∫øu ƒë√£ t·ªìn t·∫°i
    }

    setTimeout(() => {
      const purchaseOrderVariantRequest: PurchaseOrderVariantRequest = {
        variantId: variant._id, // ƒê·∫£m b·∫£o variant._id l√† string ObjectId
        // S·ª≠a l·∫°i: D√πng price hay cost t√πy thu·ªôc v√†o th·ªëng nh·∫•t c·ªßa b·∫°n
        cost: variant.cost, // Gi·∫£ s·ª≠ d√πng price
        quantity: 1,
        amount: variant.cost, // Amount = price * 1
        // cost: variant.cost, // N·∫øu b·∫°n c·∫ßn l∆∞u c·∫£ cost g·ªëc
      };
      const currentPurchaseOrderVariantRequests = [...form.values.purchaseOrderVariants, purchaseOrderVariantRequest];
      form.setFieldValue('purchaseOrderVariants', currentPurchaseOrderVariantRequests);
      form.setFieldValue('totalAmount', calculateTotalAmount(currentPurchaseOrderVariantRequests));
      setVariants(prevVariants => [...prevVariants, variant]); // D√πng callback ƒë·ªÉ ƒë·∫£m b·∫£o state ƒë√∫ng
    }, 100);
  };

  const handleQuantityInput = (quantity: number, index: number) => {
    const currentPurchaseOrderVariantRequests = produce(form.values.purchaseOrderVariants, draft => {
      const variantRequest = draft[index];
      if (variantRequest) { // Th√™m ki·ªÉm tra
        variantRequest.quantity = quantity;
        // S·ª≠a l·∫°i: D√πng price hay cost t√πy thu·ªôc v√†o th·ªëng nh·∫•t
        variantRequest.amount = (variantRequest.cost || 0) * quantity;
      }
    });
    form.setFieldValue('purchaseOrderVariants', currentPurchaseOrderVariantRequests);
    form.setFieldValue('totalAmount', calculateTotalAmount(currentPurchaseOrderVariantRequests));
  };

  const handleDeleteVariantButton = (index: number) => {
    const currentPurchaseOrderVariantRequests = form.values.purchaseOrderVariants.filter((_, i) => i !== index);
    form.setFieldValue('purchaseOrderVariants', currentPurchaseOrderVariantRequests);
    form.setFieldValue('totalAmount', calculateTotalAmount(currentPurchaseOrderVariantRequests));
    setVariants(prevVariants => prevVariants.filter((_, i) => i !== index)); // D√πng callback
  };

  // (5) ƒê·ªãnh nghƒ©a h√†m resetForm ch·ªâ M·ªòT L·∫¶N ·ªü ƒë√¢y
  const resetForm = () => {
    console.log('üîÑ Resetting form...');
    setVariants([]);
    form.reset();
    
  };

  const statusSelectList: SelectOption[] = [
    { value: '1', label: 'ƒê∆°n h√†ng m·ªõi' },
    // { value: '2', label: 'ƒêang ch·ªù duy·ªát' }, // B·ªè c√°c tr·∫°ng th√°i kh√¥ng ph√π h·ª£p khi t·∫°o m·ªõi
    // { value: '3', label: 'ƒê√£ duy·ªát' },
    // { value: '4', label: 'ƒêang x·ª≠ l√Ω' },
    // { value: '5', label: 'Ho√†n th√†nh' },
    // { value: '6', label: 'Kh√¥ng duy·ªát' },
    // { value: '7', label: 'H·ªßy b·ªè' },
  ];

  return {
    form,
    handleFormSubmit,
    handleClickVariantResultItem,
    handleQuantityInput,
    handleDeleteVariantButton,
    resetForm,
    supplierSelectList,
    destinationSelectList,
    statusSelectList,
    variants,
  };
}

export default usePurchaseOrderCreateViewModel;